**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: com.theflybook.mobile
Package Version Name: 1.0.2
Package Version Code: 10002
Min Sdk: 19
Target Sdk: 29
MD5   : 9475cca0b63e793e050eeaf9ed9225aa
SHA1  : 6fba0a1573ea6337423286325c46cd9e82b470f7
SHA256: e0a8f1d43f56b14d0af9bf99ac27065f9892ed0042669c6ecf805f52617ffc5f
SHA512: de249b28f4868708086bf706fd8a1dcb5ccf484f7196f6b369bab97a2cb846b9fd268d8344c780eee11ffa41d31d9063c9221c8ec7573e924fff0c0beb9213c6
Analyze Signature: 6c05edbd165601cce289d9f51edd649e763afe83d75032e8b87f4549a52ac73e0e7a480c2f23c136ec68b3a2a620da8d08d2429a1a0eb5936a55c1fdffc63c48
------------------------------------------------------------------------------------------------
[Critical] <KeyStore><Hacker> KeyStore Protection Checking:
           The Keystores below seem using "byte array" or "hard-coded cert info" to do SSL pinning (Total: 1). Please manually check:
               => Lcom/magtek/mobile/android/mtlib/config/HttpsTLS12TransportSE;->getServiceConnection()Lorg/ksoap2/transport/ServiceConnect
                    ion; (0x42) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V

[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 21):
               http://books.google.
                   ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->openBookSearch(Ljava/lang/String;)V
                   ->From class: Lcom/google/zxing/client/android/LocaleManager;->isBookSearchUrl(Ljava/lang/String;)Z
                   ->From class: Lcom/google/zxing/client/android/book/BrowseBookListener;->onItemClick(Landroid/widget/AdapterView;
                    Landroid/view/View; I J)V
               http://google.com/books
                   ->From class: Lcom/google/zxing/client/android/LocaleManager;->isBookSearchUrl(Ljava/lang/String;)Z
               http://maps.google.
                   ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->getDirections(D D)V
               http://ns.magtek.com.deviceconfig/
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/GetDeviceConfig;->GetSoapParams()Lorg/ksoap2/serialization/SoapObject;
               http://ns.magtek.com.deviceconfig/GetDeviceConfig
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/GetDeviceConfig;->GetSoapAction()Ljava/lang/String;
               http://ns.magtek.com/deviceconfig/
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/ProcessMessageResponse;->register(Lorg/ksoap2/serialization/SoapSer
                    ializationEnvelope;)V
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/SCRAConfiguration;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope
                    ;)V
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/ResponsePayload;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)
                    V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/ProcessMessageRequest;->register(Lorg/ksoap2/serialization/SoapSeri
                    alizationEnvelope;)V
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/ArrayOfConfigParam;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelop
                    e;)V
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/ConfigParam;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/SCRAConfigurationReaderType;->register(Lorg/ksoap2/serialization/So
                    apSerializationEnvelope;)V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/SCRAConfigurationDeviceInfo;->register(Lorg/ksoap2/serialization/So
                    apSerializationEnvelope;)V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/ArrayOfSCRAConfiguration;->register(Lorg/ksoap2/serialization/SoapS
                    erializationEnvelope;)V
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/StatusCode;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/ConfigurationWS;->getConfigurationXML(Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String; Lcom/magtek/mobile/android/mtlib/config/ProcessMessageRequest;
                    Lcom/magtek/mobile/android/mtlib/config/ProcessMessageResponse; I)Ljava/lang/String;
                   ->From class:
                    Lcom/magtek/mobile/android/mtlib/config/RequestPayload;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/GetDeviceConfigResponse;->register(Lorg/ksoap2/serialization/SoapSe
                    rializationEnvelope;)V
               http://ns.magtek.com/deviceconfig/GetDeviceConfigWithAuthentication
                   ->From class: Lcom/magtek/mobile/android/mtlib/config/ConfigurationWS;->getConfigurationXML(Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String; Lcom/magtek/mobile/android/mtlib/config/ProcessMessageRequest;
                    Lcom/magtek/mobile/android/mtlib/config/ProcessMessageResponse; I)Ljava/lang/String;
               http://schemas.xmlsoap.org/soap/encoding/
                   ->From class: Lorg/ksoap2/SoapEnvelope;-><init>(I)V
                   ->From class: Lorg/ksoap2/serialization/MarshalBase64;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
               http://schemas.xmlsoap.org/soap/envelope/
                   ->From class: Lorg/ksoap2/SoapEnvelope;-><init>(I)V
                   ->From class: Lorg/ksoap2/SoapFault;->parse(Lorg/xmlpull/v1/XmlPullParser;)V
                   ->From class: Lorg/ksoap2/SoapFault;->write(Lorg/xmlpull/v1/XmlSerializer;)V
               http://www.
                   ->From class: Lorg/kxml2/wap/wml/Wml;-><clinit>()V
               http://www.google
                   ->From class: Lcom/google/zxing/client/android/CaptureActivity;->onResume()V
               http://www.google.
                   ->From class: Lcom/google/zxing/client/android/result/supplement/BookResultInfoRetriever;->retrieveSupplementalInfo()V
                   ->From class: Lcom/google/zxing/client/android/result/ResultHandler;->openProductSearch(Ljava/lang/String;)V
               http://www.google.com/books?id=
                   ->From class: Lcom/google/zxing/client/android/book/SearchBookContentsActivity$NetworkTask;->doInBackground([Ljava/lang/S
                    tring;)Lorg/json/JSONObject;
               http://www.google.com/books?vid=isbn
                   ->From class: Lcom/google/zxing/client/android/book/SearchBookContentsActivity$NetworkTask;->doInBackground([Ljava/lang/S
                    tring;)Lorg/json/JSONObject;
               http://xml.apache.org/xml-soap
                   ->From class:
                    Lorg/ksoap2/serialization/MarshalHashtable;->register(Lorg/ksoap2/serialization/SoapSerializationEnvelope;)V
               http://xmlpull.org/v1/doc/
                   ->From class: Lorg/kxml2/io/KXmlParser;->isProp(Ljava/lang/String; Z Ljava/lang/String;)Z
               http://xmlpull.org/v1/doc/features.html#indent-output
                   ->From class: Lorg/kxml2/io/KXmlSerializer;->setFeature(Ljava/lang/String; Z)V
                   ->From class: Lorg/kxml2/io/KXmlSerializer;->getFeature(Ljava/lang/String;)Z
               http://xmlpull.org/v1/doc/features.html#process-namespaces
                   ->From class: Lorg/kxml2/io/KXmlParser;->setFeature(Ljava/lang/String; Z)V
                   ->From class: Lorg/xmlpull/v1/XmlPullParserFactory;->isNamespaceAware()Z
                   ->From class: Lorg/kxml2/wap/WbxmlParser;->getFeature(Ljava/lang/String;)Z
                   ->From class: Lorg/xmlpull/v1/XmlPullParserFactory;->setNamespaceAware(Z)V
                   ->From class: Lorg/ksoap2/transport/Transport;->parseResponse(Lorg/ksoap2/SoapEnvelope; Ljava/io/InputStream;)V
                   ->From class: Lorg/kxml2/io/KXmlParser;->getFeature(Ljava/lang/String;)Z
                   ->From class: Lorg/kxml2/wap/WbxmlParser;->setFeature(Ljava/lang/String; Z)V
               http://xmlpull.org/v1/doc/features.html#validation
                   ->From class: Lorg/xmlpull/v1/XmlPullParserFactory;->isValidating()Z
                   ->From class: Lorg/xmlpull/v1/XmlPullParserFactory;->setValidating(Z)V
               http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone
                   ->From class: Lorg/kxml2/kdom/Document;->parse(Lorg/xmlpull/v1/XmlPullParser;)V
               http://zxing.appspot.com/scan
                   ->From class: Lcom/google/zxing/client/android/CaptureActivity;-><clinit>()V

[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
               References:
               (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
               (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
               (3)https://jira.appcelerator.org/browse/TIMOB-4488
               Vulnerable codes:

               Lorg/apache/cordova/engine/SystemWebViewClient;-> onReceivedSslError(Landroid/webkit/WebView;
                    Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V

[Critical] <Strandhogg> Standhogg 2.0:
           This application is vulnerable to the Standhogg 2.0 vulnerability. Please set activity launchModes to 'singleTask' or
           'singleInstance'. Please see https://promon.co/strandhogg-2-0/ for more details
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/google/zxing/client/android/encode/EncodeActivity;->share()V (0x46) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/ionicframework/common/IonicCordovaCommon;->getDirectory(Ljava/lang/String;)Ljava/io/File; (0x8c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/google/zxing/client/android/history/HistoryManager;->saveHistory(Ljava/lang/String;)Landroid/net/Uri; (0x4) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
                    Note that this enables or disables file system access only. Assets and resources are still accessible using
           file:///android_asset and file:///android_res.
                    The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
                    Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                               (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
                    Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:

               Methods where WebSettings is used, and setAllowFileAccess might be enabled by default:
               => Lcom/ionicframework/cordova/webview/IonicWebViewEngine;->init(Lorg/apache/cordova/CordovaWebView;
                    Lorg/apache/cordova/CordovaInterface; Lorg/apache/cordova/CordovaWebViewEngine$Client;
                    Lorg/apache/cordova/CordovaResourceApi; Lorg/apache/cordova/PluginManager; Lorg/apache/cordova/NativeToJsMessageQueue;)V

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               su.pr
                   ->From class: Lcom/google/zxing/client/android/HttpHelper;-><clinit>()V

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/zebra/sdk/printer/internal/ProfileUtilLinkOsImpl;->loadFirmwareFromProfile(Ljava/lang/String; Z)V (0xe4) --->
                    Ljava/io/File;->delete()Z
               => Lcom/zebra/sdk/printer/internal/ProfileUtilLinkOsImpl;->loadFirmwareFromProfile(Ljava/lang/String; Z)V (0x7c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/zebra/sdk/printer/internal/ProfileHelper;->modifyProfile(Ljava/lang/String;
                    Lcom/zebra/sdk/printer/internal/ProfileHelper$ProfileComponentTransformer;)V (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/google/zxing/client/android/encode/EncodeActivity;->share()V (0xea) ---> Ljava/io/File;->delete()Z
               => Lcom/zebra/sdk/printer/internal/ProfileHelper;->modifyProfile(Ljava/lang/String;
                    Lcom/zebra/sdk/printer/internal/ProfileHelper$ProfileComponentTransformer;)V (0xe8) ---> Ljava/io/File;->delete()Z

[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Detected code that checks whether debug mode is enabled in:
               Lorg/apache/cordova/engine/SystemWebViewClient;->onReceivedSslError(Landroid/webkit/WebView; Landroid/webkit/SslErrorHandler;
                    Landroid/net/http/SslError;)V
               Lorg/apache/cordova/engine/SystemWebViewEngine;->initWebViewSettings()V

[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info] <Signature><Hacker> Getting Signature Code Checking:
           Did not detect this app is checking the signature in the code.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking:
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 0.58021 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.11741223399985756 secs
Total elapsed time: 8.754636 secs
