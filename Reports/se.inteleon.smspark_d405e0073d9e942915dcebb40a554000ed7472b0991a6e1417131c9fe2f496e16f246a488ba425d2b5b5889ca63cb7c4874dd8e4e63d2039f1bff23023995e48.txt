**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: se.inteleon.smspark
Package Version Name: 4.5.0
Package Version Code: 45000
Min Sdk: 21
Target Sdk: 29
MD5   : f75271111babea62e577bfbbd88573f5
SHA1  : b89da2c22481d9c1827463379f14a5c46136fcdc
SHA256: 6518eb767d4127cc76a4698bde3d5f6131c329d7ca69bcee82eb45f1b7796647
SHA512: 9d1450a44b18b4bb052062974bf91ff428e9915916c2616c7c565ae1436563bff7282318f3c164a21a9683f47738fb51d699a86ccaab3c8a458380cdc2ec303a
Analyze Signature: d405e0073d9e942915dcebb40a554000ed7472b0991a6e1417131c9fe2f496e16f246a488ba425d2b5b5889ca63cb7c4874dd8e4e63d2039f1bff23023995e48
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 1):
               http://play.google.com/store/apps/details?id=se.inteleon.smspark
                   ->From class: Lse/inteleon/smspark/fragment/CollectedParkingsFragment;->A2()V

[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
                    ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on
           releases of Android prior to 2.2 (Froyo).
                    Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every
           instance has the same ANDROID_ID.
                    If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
                    Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lcom/google/android/gms/measurement/internal/zzki;->zzc(Lcom/google/android/gms/measurement/internal/zzar;
                    Lcom/google/android/gms/measurement/internal/zzn;)V (0xe2c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/firebase/crashlytics/internal/common/CommonUtils;->B(Landroid/content/Context;)Z (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lb/h/f/e;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x40)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/m;->d()Z (0x8) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/measurement/internal/zzah;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x70)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/j/g;->F(Ljava/io/File;)V (0x32) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/j;->J([Ljava/io/File;)V (0xb6) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/j/g;->g()V (0x28) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/k;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/j/g;->x()Ljava/util/List; (0xb0) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) --->
                    Ljava/io/File;->delete()Z
               => Lcom/mixpanel/android/util/ImageStore;->b(Ljava/io/File;)Landroid/graphics/Bitmap; (0x5c) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/h0;->i(Ljava/io/File;)V (0x2c) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/j/g;->e()V (0x56) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->K()Ljava/util/List; (0x1d8) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/e;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x82)
                    ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->g(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File;
                    Ljava/lang/String;)V (0x1fe) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/j;->x0([Ljava/io/File; Ljava/util/Set;)V (0x5c) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/multidex/a;->d(Landroid/content/Context;)V (0x16c) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/a;->d(Landroid/content/Context;)V (0xf8) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/amplitude/api/j;->k()V (0x14) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/j/g;->h(Ljava/lang/String;)V (0x6c) ---> Ljava/io/File;->delete()Z
               => Lcom/mixpanel/android/util/ImageStore;->c(Ljava/lang/String;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/j;->u0()Lcom/google/android/gms/tasks/g; (0x80) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/e;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x6c)
                    ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->g(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File;
                    Ljava/lang/String;)V (0x134) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/j;->H([Ljava/io/File;)V (0x12) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/k;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x36) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/b;->remove()V (0x90) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/h/b;->b(Ljava/util/Set;)V (0x38) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/e;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x8a)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/d/h/d;->d()V (0xa) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/measurement/internal/zzem;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x40)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/j;->x0([Ljava/io/File; Ljava/util/Set;)V (0xaa) --->
                    Ljava/io/File;->delete()Z
               => Lcom/mixpanel/android/mpmetrics/MPDbAdapter$a;->g()V (0xa) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x46) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/k;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/c;->remove()V (0x40) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/j;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->b()V (0xb2) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/e;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x74)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/b;->remove()V (0x4c) ---> Ljava/io/File;->delete()Z

[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Detected code that checks whether debug mode is enabled in:
               Lcom/google/android/gms/common/i;->e(Ljava/lang/String; Z Z)Lcom/google/android/gms/common/y;

[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/google/android/gms/measurement/internal/zzek;->zzz()V (0x5c) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/firebase/crashlytics/internal/common/w;->b(Landroid/content/Context;)Ljava/lang/String; (0x10) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/i;->e(Ljava/lang/String; Z Z)Lcom/google/android/gms/common/y; (0x3c) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/h;->k(Landroid/content/Context; Z I)I (0x68) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lb/h/j/b;->h(Landroid/content/pm/PackageManager; Lb/h/j/a;
                    Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/util/o;->a(Landroid/content/Context; I)Z (0x20) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info]  External Storage Accessing:
           External storage access not found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking:
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info] <Strandhogg> Standhogg 2.0:
           This application does not seem to be vulnerable to the Standhogg 2.0 vulnerability
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 1.357547 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.3079189270001734 secs
Total elapsed time: 23.388507 secs
