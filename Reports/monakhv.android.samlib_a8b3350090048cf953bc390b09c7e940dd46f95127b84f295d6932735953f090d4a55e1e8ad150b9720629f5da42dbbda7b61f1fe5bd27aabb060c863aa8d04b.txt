**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: monakhv.android.samlib
Package Version Name: 3.3.5
Package Version Code: 103335
Min Sdk: 11
Target Sdk: 22
MD5   : 555f08377026c3125d012b6892b5f6c7
SHA1  : 39768c59c2fb8d0f82f1a3e9670b11a5be69ed62
SHA256: a9847bddfdc4c7f36817e981478f61cad5b38ae83dd46c0f96aa8364521e3ba7
SHA512: c6fe02395be98923fe8b85c8243ff3531a3407e16b5d7a125bb7c5acf0b55db8647dcd173203be3f9afdb1d622266a620bfd5713e86c7c02fb3509d3fa6c594b
Analyze Signature: a8b3350090048cf953bc390b09c7e940dd46f95127b84f295d6932735953f090d4a55e1e8ad150b9720629f5da42dbbda7b61f1fe5bd27aabb060c863aa8d04b
------------------------------------------------------------------------------------------------
[Critical]  App Sandbox Permission Checking:
           Security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found (Please check:
           https://www.owasp.org/index.php/Mobile_Top_10_2014-M2):
               [getSharedPreferences]
               => Lcom/google/android/gms/flags/impl/zzb$1;->zzvw()Landroid/content/SharedPreferences; (0xa) --->
                    Landroid/content/Context;->getSharedPreferences(Ljava/lang/String; I)Landroid/content/SharedPreferences;
               --------------------------------------------------

[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 8):
               http://logback.qos.ch/codes.html#renamingError
                   ->From class: Lch/qos/logback/core/rolling/helper/RenameUtil;-><clinit>()V
               http://logback.qos.ch/codes.html#rfa_collision
                   ->From class: Lch/qos/logback/core/rolling/RollingFileAppender;-><clinit>()V
               http://logback.qos.ch/codes.html#rfa_no_rp
                   ->From class: Lch/qos/logback/core/rolling/RollingFileAppender;-><clinit>()V
               http://logback.qos.ch/codes.html#rfa_no_tp
                   ->From class: Lch/qos/logback/core/rolling/RollingFileAppender;-><clinit>()V
               http://logback.qos.ch/codes.html#sbtp_size_format
                   ->From class: Lch/qos/logback/core/rolling/SizeBasedTriggeringPolicy;->toFileSize(Ljava/lang/String;)J
               http://logback.qos.ch/css/classic.css
                   ->From class: Lch/qos/logback/classic/html/UrlCssBuilder;-><init>()V
               http://plus.google.com/
                   ->From class: Lcom/google/android/gms/common/internal/zzn;-><clinit>()V
               http://samlib.ru
                   ->From class: Lmonakhv/android/samlib/sql/AuthorDB;->upgradeSchema4To5(Landroid/database/sqlite/SQLiteDatabase;)V
                   ->From class: Lmonakhv/android/samlib/sql/DatabaseHelper;->upgradeSchema4To5()V

[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lmonakhv/android/samlib/data/SettingsHelper;->getDataDirectory()Ljava/io/File; (0x2c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lch/qos/logback/core/android/CommonPathUtil;->getMountedExternalStorageDirectoryPath()Ljava/lang/String; (0x36) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lch/qos/logback/core/android/CommonPathUtil;->getExternalStorageDirectoryPath()Ljava/lang/String; (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases.
               Prior to Android 4.0, Android has SQLite Journal Information Disclosure Vulnerability.
               But it can only be solved by users upgrading to Android > 4.0 and YOU CANNOT SOLVE IT BY YOURSELF (But you can use encrypt
           your databases and Journals by "SQLCipher" or other libs).
               Proof-Of-Concept Reference:
               (1) http://blog.watchfire.com/files/androidsqlitejournal.pdf
               (2) http://www.youtube.com/watch?v=oCXLHjmH5rY
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lch/qos/logback/core/rolling/helper/FileFilterUtil;->removeEmptyParentDirectories(Ljava/io/File; I)V (0x28) --->
                    Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/FixedWindowRollingPolicy;->rollover()V (0x2e) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->delete(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0xda) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x48) ---> Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/Compressor;->zipCompress(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)V
                    (0x236) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x54) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/BitmapTeleporter;->zzqb()Ljava/io/FileOutputStream; (0x46) --->
                    Ljava/io/File;->delete()Z
               => Lmonakhv/samlib/data/AbstractSettings;->cleanBookFile(Lmonakhv/samlib/db/entity/Book;)V (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/SizeAndTimeBasedArchiveRemover;->cleanByPeriodOffset(Ljava/util/Date; I)V (0x7a) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0x3a) ---> Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/DefaultArchiveRemover;->removeFolderIfEmpty(Ljava/io/File; I)V (0x58) --->
                    Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/TimeBasedArchiveRemover;->cleanByPeriodOffset(Ljava/util/Date; I)V (0x3a) --->
                    Ljava/io/File;->delete()Z
               => Lmonakhv/samlib/data/AbstractSettings;->checkDeleteBook(Ljava/io/File;)V (0x78) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->deleteContents(Ljava/io/File;)V (0x5c) ---> Ljava/io/File;->delete()Z
               => Lmonakhv/samlib/db/entity/SamLibConfig;->transformBook(Ljava/io/File;)V (0x1a2) ---> Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/RenameUtil;->renameByCopying(Ljava/lang/String; Ljava/lang/String;)V (0x22) --->
                    Ljava/io/File;->delete()Z
               => Lch/qos/logback/core/rolling/helper/Compressor;->gzCompress(Ljava/lang/String; Ljava/lang/String;)V (0x204) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->update(I)V (0x34) ---> Ljava/io/File;->deleteOnExit()V

[Notice] <KeyStore><Hacker> KeyStore Protection Information:
           The Keystores below are "protected" by password and seem using SSL-pinning (Total: 1). You can use "Portecle" tool to manage the
           certificates in the KeyStore:
               => Lch/qos/logback/core/net/ssl/KeyStoreFactoryBean;->createKeyStore()Ljava/security/KeyStore; (0x4e) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/zze;->zzf(Landroid/content/Context; I)Z (0x24) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/zze;->zzb(Landroid/content/pm/PackageManager;)Z (0x1c) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/zze;->isGooglePlayServicesAvailable(Landroid/content/Context;)I (0x54) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <Debug><Hacker> Code for Checking Android Debug Mode:
           Did not detect code that checks whether debug mode is enabled
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest Exported Components Checking:
           No exported components(except for Launcher) for receiving Android or outside applications' actions (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info] <Strandhogg> Standhogg 2.0:
           This application does not seem to be vulnerable to the Standhogg 2.0 vulnerability
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView> WebView Potential XSS Attacks Checking:
           Did not detect "setJavaScriptEnabled(true)" in WebView.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 1.288285 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.27026535700042587 secs
Total elapsed time: 23.78494 secs
