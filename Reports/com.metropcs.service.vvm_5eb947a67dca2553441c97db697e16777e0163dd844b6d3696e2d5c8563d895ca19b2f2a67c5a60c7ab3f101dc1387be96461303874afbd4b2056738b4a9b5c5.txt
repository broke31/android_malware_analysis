**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: com.metropcs.service.vvm
Package Version Name: 6.37.8.93673
Package Version Code: 93673
Min Sdk: 18
Target Sdk: 29
MD5   : f2dded11ecf2d69fea6bbb5b94c22722
SHA1  : c3b90457d42696a8da727ed9b35d86dc5323f0e4
SHA256: 8b45a07470fb84364597004604be7a307773b4ec3903c30baef364d89317a54e
SHA512: 2f91183858dd116bfe12609eaebc651f88e9dd70290cbb0bf10fdc9d1bdd051b19a9f89da4780814e52ccd667dc06011929bcd96bb3c4948a6031c387e199b2d
Analyze Signature: 5eb947a67dca2553441c97db697e16777e0163dd844b6d3696e2d5c8563d895ca19b2f2a67c5a60c7ab3f101dc1387be96461303874afbd4b2056738b4a9b5c5
------------------------------------------------------------------------------------------------
[Critical] <Command> Runtime Command Checking:
           This app is using critical function 'Runtime.getRuntime().exec("...")'.
           Please confirm these following code secions are not harmful:
               => Lcom/splunk/mint/Utils;->readLogs()Ljava/lang/String; (0x44) --->
                    Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;

[Critical] <KeyStore><Hacker> KeyStore Protection Checking:
           The Keystores below seem using "byte array" or "hard-coded cert info" to do SSL pinning (Total: 2). Please manually check:
               => Lcom/tmobile/tmoid/agent/IAMWebViewClient;->createKeystoreForPrivateCertificates(Landroid/content/Context;)Ljava/security/
                    KeyStore; (0x84) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/tmobile/tmoid/helperlib/sit/http/HttpDefaultHandler;->initSecureConnection()V (0x36) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V

[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
               Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.tmobile.vvm.application.gcm.VVMFcmListenerService
               => com.tmobile.vvm.application.gcm.VVMInstanceIDListenerService
               => com.firstorion.libcyd.FirebaseTokenService
               => com.firstorion.libcyd.FirebaseMessageService
               => com.google.firebase.messaging.FirebaseMessagingService
               => com.google.firebase.iid.FirebaseInstanceIdService

[Critical]  AndroidManifest ContentProvider Exported Checking:
           Found "exported" ContentProvider, allowing any other app on the device to access it (AndroidManifest.xml). You should modify the
           attribute to [exported="false"] or set at least "signature" protectionalLevel permission if you don't want to.
               Vulnerable ContentProvider Case Example:
                 (1)https://www.nowsecure.com/mobile-security/ebay-android-content-provider-injection-vulnerability.html
                 (2)http://blog.trustlook.com/2013/10/23/ebay-android-content-provider-information-disclosure-vulnerability/
                 (3)http://www.wooyun.org/bugs/wooyun-2010-039169
                 provider => com.tmobile.vvm.application.provider.VVMActiveStatusProvider

[Critical] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           This app does not check the validation of the CN(Common Name) of the SSL certificate ("ALLOW_ALL_HOSTNAME_VERIFIER" field or
           "AllowAllHostnameVerifier" class).
                   This is a critical vulnerability and allows attackers to do MITM attacks with his valid certificate without your
           knowledge.
                   Case example:
                   (1)http://osvdb.org/96411
                   (2)http://www.wooyun.org/bugs/wooyun-2010-042710
                   (3)http://www.wooyun.org/bugs/wooyun-2010-052339
                   Also check Google doc: http://developer.android.com/training/articles/security-ssl.html (Caution: Replacing
           HostnameVerifier can be very dangerous).
                   OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
                   Check this book to see how to solve this issue: http://goo.gl/BFb65r

                   To see what's the importance of Common Name(CN) verification.
                   Use Google Chrome to navigate:
                    - https://www.google.com   => SSL certificate is valid
                    - https://60.199.175.158/  => This is the IP address of google.com, but the CN is not match, making the certificate
           invalid. You still can go Google.com but now you cannot distinguish attackers from normal users

                   Please check the code inside these methods:
               => Lcom/tmobile/tmoid/agent/IAMWebViewClient;->createHttpClient(Landroid/content/Context;)Lorg/apache/http/client/HttpClient;
                    (0x60) --->
                    Lorg/apache/http/conn/ssl/SSLSocketFactory;->setHostnameVerifier(Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V

[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 6):
               http://adlog.flurry.com
                   ->From class: Lcom/flurry/android/impl/ads/FlurryAdModule;->r()Ljava/lang/String;
               http://ads.flurry.com/v6/getAds.do
                   ->From class: Lcom/flurry/android/impl/ads/FlurryAdModule;->q()Ljava/lang/String;
               http://mobile.eum-appdynamics.com/
                   ->From class: Lcom/tmobile/vvm/application/VVM;->onCreate()V
               http://selfhelp.geo.t-mobile.com/myaccountservice/myaccountservice/valuebundles/MSISDN
                   ->From class:
                    Lcom/tmobile/vvm/application/AccountManager;->addVvmSoc()Lcom/tmobile/vvm/application/provisioning/ProvisioningApiRespon
                    se;
               http://selfservice.geo.t-mobile.com/myaccountservice/
                   ->From class: Lcom/tmobile/vvm/application/myaccount/MyAccountService;->getHostServer()Ljava/lang/String;
               http://voicemail.my.t-mobile.com/voicemailweb/
                   ->From class: Lcom/tmobile/vvm/application/myaccount/VWIService;->getHostServer()Ljava/lang/String;

[Critical] <SSL_Security> SSL Certificate Verification Checking:
           This app DOES NOT check the validation of SSL Certificate. It allows self-signed, expired or mismatch CN certificates for SSL
           connection.
               This is a critical vulnerability and allows attackers to do MITM attacks without your knowledge.
               If you are transmitting users' username or password, these sensitive information may be leaking.
               Reference:
               (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
               (2)Android Security book: http://goo.gl/BFb65r
               (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561
               This vulnerability is much more severe than Apple's "goto fail" vulnerability: http://goo.gl/eFlovw
               Please do not try to create a "X509Certificate" and override "checkClientTrusted", "checkServerTrusted", and
           "getAcceptedIssuers" functions with blank implementation.
               We strongly suggest you use the existing API instead of creating your own X509Certificate class.
               Please modify or remove these vulnerable code:

               [Confirm Vulnerable]
               => Lcom/tmobile/vvm/application/mail/store/TrustManagerFactory$SimpleX509TrustManager;
                     -> used by: Lcom/tmobile/vvm/application/mail/store/TrustManagerFactory;-><clinit>()V
               --------------------------------------------------
               [Maybe Vulnerable (Please manually confirm)]
               => Lcom/flurry/android/monolithic/sdk/impl/iy;
                     -> used by: Lcom/flurry/android/monolithic/sdk/impl/ix;->a()Ljavax/net/ssl/SSLContext;

[Critical] <Strandhogg> Standhogg 2.0:
           This application is vulnerable to the Standhogg 2.0 vulnerability. Please set activity launchModes to 'singleTask' or
           'singleInstance'. Please see https://promon.co/strandhogg-2-0/ for more details
[Critical] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           Found a critical WebView "addJavascriptInterface" vulnerability. This method can be used to allow JavaScript to control the host
           application.
                           This is a powerful feature, but also presents a security risk for applications targeted to API level
           JELLY_BEAN(4.2) or below, because JavaScript could use reflection to access an injected object's public fields. Use of this
           method in a WebView containing untrusted content could allow an attacker to manipulate the host application in unintended ways,
           executing Java code with the permissions of the host application.
                           Reference:
                             1."http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
           java.lang.String) "
                             2.https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
                             3.http://50.56.33.56/blog/?p=314
                             4.http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-
           vulnerability/
                           Please modify the below code:
               => Lcom/splunk/mint/MintWebView;->init(Landroid/app/Application;)V (0x26) --->
                    Lcom/splunk/mint/MintWebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/appdynamics/eumagent/runtime/InstrumentationCallbacks;->loadUrlCalled(Landroid/webkit/WebView;)V (0x28) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/tmobile/tmoid/agent/IAMMainActivity;->setup_webview()V (0x16e) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V

[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/tmobile/vvm/application/activity/utils/EmailLogsUtil;->getLogsDir()Ljava/io/File; (0x38) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/Utility;->doSave(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String;)V (0x10) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/export/DeviceImportController;->generateVvmImportSourceDir(Ljava/lang/String;
                    Z)Ljava/lang/String; (0x54) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/ls/directoryselector/DirectoryDialog$2;->getInitialDirectory()Ljava/io/File; (0x0) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/activity/VoicemailsDeleteFragment;->lambda$getExportConfirmationDialog$1(Lcom/tmobile/vvm/app
                    lication/activity/VoicemailsDeleteFragment; Landroid/app/AlertDialog; Landroid/view/View;)V (0x50) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/config/MockDataLoader;->injectDeviceConfig(Lcom/tmobile/vvm/application/config/MockData;)V
                    (0x1e) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/tmoid/helperlib/impl/Constants;-><clinit>()V (0xa) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lorg/acra/file/Directory$7;->getFile(Landroid/content/Context; Ljava/lang/String;)Ljava/io/File; (0x4) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/Utility;->doSave(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String;)V (0xac) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/config/MockDataLoader;->loadMockData()Lcom/tmobile/vvm/application/config/MockData; (0x24)
                    ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/export/DeviceImportController;->performImport(Landroid/content/Context;)V (0x26) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               =>
                    Lcom/tmobile/vvm/application/config/MockDataLoader;->injectVVMProfileResponse(Lcom/tmobile/vvm/application/config/MockDa
                    ta;)V (0x1e) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/Utility;->doSave(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String;)V (0x68) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/tmobile/vvm/application/activity/CopyToActivity;->onCreate(Landroid/os/Bundle;)V (0xae) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
               These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't
           want to.
               You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                  service => com.tmobile.vvm.application.gcm.VVMFcmListenerService
                  service => com.tmobile.vvm.application.gcm.VVMInstanceIDListenerService
                  service => com.firstorion.libcyd.FirebaseTokenService
                  service => com.firstorion.libcyd.FirebaseMessageService
                  service => com.google.firebase.messaging.FirebaseMessagingService
                  service => com.google.firebase.iid.FirebaseInstanceIdService
                 receiver => com.tmobile.vvm.application.service.GeneralReceiver
                 receiver => com.tmobile.vvm.application.receivers.MailServiceReceiver
                 receiver => com.tmobile.vvm.application.gcm.PushNotificationReceiver

[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all
           if, in this situation, your app should regard this as the same device.
               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for
           example zeros or asterisks.
               If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lorg/acra/collector/DeviceIdCollector;->collect(Lorg/acra/ReportField; Landroid/content/Context;
                    Lorg/acra/config/CoreConfiguration; Lorg/acra/builder/ReportBuilder; Lorg/acra/data/CrashReportData;)V (0xc) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/tmobile/tmoid/agent/utils/Utils;->getOrGenerateDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x30) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/tmobile/vvm/application/Utility;->getOrGenerateDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x30) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/flurry/android/FlurryWallet;->a()Ljava/lang/String; (0x40) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/flurry/android/monolithic/sdk/impl/im;->b()V (0x26) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;

[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
                    ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on
           releases of Android prior to 2.2 (Froyo).
                    Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every
           instance has the same ANDROID_ID.
                    If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
                    Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lcom/flurry/android/monolithic/sdk/impl/ip;->b()Ljava/lang/String; (0x1c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/flurry/android/FlurryWallet;->a()Ljava/lang/String; (0x7e) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/tmobile/tmoid/agent/utils/Utils;->getOrGenerateDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x4c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/tmobile/vvm/application/Utility;->getOrGenerateDeviceId(Landroid/content/Context;)Ljava/lang/String; (0x4c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;

[Warning]  Codes for Sending SMS:
           This app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage):
               => Lcom/tmobile/vvm/application/SmsController;->doSendSms(Lcom/tmobile/vvm/application/sms/SmsContract$PrefixValue;
                    Landroid/content/Context; Lcom/tmobile/vvm/application/permissions/ResultListener;)V (0x110) --->
                    Landroid/telephony/SmsManager;->sendDataMessage(Ljava/lang/String; Ljava/lang/String; S [B Landroid/app/PendingIntent;
                    Landroid/app/PendingIntent;)V

[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
                    Note that this enables or disables file system access only. Assets and resources are still accessible using
           file:///android_asset and file:///android_res.
                    The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
                    Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                               (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
                    Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:

               Methods where WebSettings is used, and setAllowFileAccess might be enabled by default:
               => Lcom/flurry/android/monolithic/sdk/impl/ar;-><init>(Landroid/content/Context; Ljava/lang/String;)V
               => Lcom/flurry/android/monolithic/sdk/impl/o;->initLayout()V
               => Lcom/splunk/mint/MintWebView;->init(Landroid/app/Application;)V
               => Lcom/tmobile/tmoid/agent/IAMMainActivity;->setup_webview()V

[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/flurry/android/monolithic/sdk/impl/ar;-><init>(Landroid/content/Context; Ljava/lang/String;)V (0x64) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/tmobile/tmoid/agent/IAMMainActivity;->setup_webview()V (0xd6) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/flurry/android/monolithic/sdk/impl/o;->initLayout()V (0x226) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/splunk/mint/MintWebView;->init(Landroid/app/Application;)V (0x18) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               /system/bin/
                   ->From class: Lcom/splunk/mint/Utils;->checkForRoot()Z
               /system/bin/failsafe/
                   ->From class: Lcom/splunk/mint/Utils;->checkForRoot()Z
               su
                   ->From class: Lcom/splunk/mint/Utils;->checkForRoot()Z
               /system/bin/cat
                   ->From class: Lcom/splunk/mint/Utils;->getMemoryInfo()Ljava/util/HashMap;

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lcom/tmobile/vvm/application/mail/internet/BinaryTempFileBody$BinaryTempFileBodyInputStream;->close()V (0x12) --->
                    Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/internet/BinaryTempFileBody;->writeTo(Ljava/io/OutputStream;)V (0x26) --->
                    Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/crashes/NativeCrashHandler$1;->run()V (0x186) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/activity/AudioRecorder;->deleteAudioFile()V (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/private/w;->a()V (0x132) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/provider/AttachmentProvider;->onCreate()Z (0x4c) ---> Ljava/io/File;->delete()Z
               => Lorg/acra/startup/StartupProcessorExecutor;->lambda$null$0(Lorg/acra/startup/StartupProcessorExecutor;
                    Ljava/util/Calendar; Z)V (0x114) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/crashes/NativeCrashHandler$1;->run()V (0x130) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/store/LocalStore$LocalFolder;->deleteAttachmentFilesForMessage(Lcom/tmobile/vvm/applicat
                    ion/mail/store/LocalStore$LocalMessage;)V (0x232) ---> Ljava/io/File;->delete()Z
               => Lcom/splunk/mint/LastPing$1;->call()Ljava/lang/Boolean; (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/android/monolithic/sdk/impl/ew;->c()Z (0x14) ---> Ljava/io/File;->delete()Z
               => Lorg/acra/file/BulkReportDeleter;->deleteReports(Z I)V (0x3c) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/store/LocalStore$LocalFolder;->deleteAttachments(Ljava/lang/String;)V (0xc0) --->
                    Ljava/io/File;->delete()Z
               => Lcom/flurry/android/impl/ads/FlurryAdModule;->C()V (0x8e) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/private/bk;->b()V (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/crashes/NativeCrashHandler$1;->run()V (0x1b6) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/iid/zzy;->zza(Landroid/content/Context;)V (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/store/LocalStore$LocalFolder;->deleteAttachmentFilesForMessage(Lcom/tmobile/vvm/applicat
                    ion/mail/store/LocalStore$LocalMessage;)V (0x300) ---> Ljava/io/File;->delete()Z
               => Lcom/splunk/mint/DataSaver;->saveLastSavedName(Ljava/lang/String;)V (0x3c) ---> Ljava/io/File;->delete()Z
               => Lcom/splunk/mint/CrashInfo$2;->run()V (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/android/monolithic/sdk/impl/fb;->d(Landroid/content/Context;)V (0xee) ---> Ljava/io/File;->delete()Z
               => Lorg/acra/util/IOUtils;->deleteFile(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/crashes/NativeCrashHandler$1;->run()V (0x160) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/android/monolithic/sdk/impl/ey;->a(Ljava/io/File;)Z (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/splunk/mint/DataSaver;->deleteOldFiles()V (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/splunk/mint/DataSaver;->flushInternal()V (0x10e) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/private/bk;->d(Ljava/lang/String;)V (0x38) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->deleteContents(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/android/impl/ads/FlurryAdModule;->E()V (0x82) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/store/LocalStore$LocalFolder;->saveAttachment(J Lcom/tmobile/vvm/application/mail/Part;
                    Z)V (0x40e) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/store/LocalStore;->removeFile(Ljava/io/File;)V (0x2c) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/provider/AttachmentProvider;->delete(Landroid/net/Uri; Ljava/lang/String;
                    [Ljava/lang/String;)I (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/private/w;->a()V (0xfc) ---> Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/activity/RecorderDialogFragment$3;->onClick(Landroid/view/View;)V (0x66) --->
                    Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->delete(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lcom/appdynamics/eumagent/runtime/private/t;->a()V (0xc) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/BitmapTeleporter;->zabz()Ljava/io/FileOutputStream; (0x32) --->
                    Ljava/io/File;->delete()Z
               => Lcom/tmobile/vvm/application/mail/internet/BinaryTempFileBody;->getOutputStream()Ljava/io/OutputStream; (0x1a) --->
                    Ljava/io/File;->deleteOnExit()V

[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Detected code that checks whether debug mode is enabled in:
               Lcom/google/android/gms/common/GoogleSignatureVerifier;->zza(Landroid/content/pm/PackageInfo;)Lcom/google/android/gms/common/
                    zzm;
               Lorg/acra/sender/ReportDistributor;->isDebuggable()Z

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/GooglePlayServicesUtilLight;->zza(Landroid/content/Context; Z I)I (0x50) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/wrappers/PackageManagerWrapper;->zza(Ljava/lang/String; I
                    I)Landroid/content/pm/PackageInfo; (0x10) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;
                    I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/util/UidVerifier;->isGooglePlayServicesUid(Landroid/content/Context; I)Z (0x24) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/tmobile/tmoid/helperlib/HelperLibraryImpl;->getSignatureForPackageName(Ljava/lang/String;)Ljava/lang/String; (0x10)
                    ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libadeum.so]
               => Lcom/appdynamics/eumagent/runtime/crashes/NativeCrashHandler;-><clinit>()V (0x4) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libeapakajni.so]
               => Lcom/tmobile/tmoid/helperlib/sit/eap/EapAkaCommon;-><clinit>()V (0x4) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V

[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.tmobile.vvm.application.activity.setup.PVMUpgradeActivity
                 receiver => com.tmobile.vvm.application.service.BootReceiver
                 receiver => com.tmobile.vvm.application.service.OnUpgradeReceiver
                 receiver => com.tmobile.vvm.application.widget.VVMWidget
                 receiver => com.tmobile.vvm.application.service.SimSwapReceiver
                 receiver => com.tmobile.vvm.application.service.MissedCallReceiver
                 receiver => com.firstorion.libcyd.PhoneStateReceiver

[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
------------------------------------------------------------
AndroBugs analyzing time: 2.313457 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.3171633889996883 secs
Total elapsed time: 28.022189 secs
