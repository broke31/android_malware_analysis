**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: com.adsk.sketchbook
Package Version Name: 5.2.5
Package Version Code: 453889
Min Sdk: 21
Target Sdk: 29
MD5   : a039af7c9f0dc9d814a2e2b2b9f5482a
SHA1  : d89ec420faa9a84dcd0c6c7b1d0ef55e7298246b
SHA256: 2cd73bff17d2c946a46de8a608e5a6fe493cfcd4162db1d24f4dbdf844e0daf7
SHA512: 0298bdc036dc11ffd4d8628fe9fad606d13a1e5bd3e92aa9a9fcae30eac6d572f07995964cd423a14dd42fc0e8af39d80fd441d3692464819fcec779a2d2d018
Analyze Signature: b6c68ac9b61596871fe67e6cc611b24b3911a6520e34c48c28a5dfd9cb6980ed3ac3ff59b9b5f5e69340ab9b559c7fb241796083d044f171974ac59115849596
------------------------------------------------------------------------------------------------
[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
               References:
               (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
               (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
               (3)https://jira.appcelerator.org/browse/TIMOB-4488
               Vulnerable codes:

               Lc/a/c/h1/r;-> onReceivedSslError(Landroid/webkit/WebView; Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V

[Critical]  AndroidManifest Critical Use Permission Checking:
           This app has very high privileges. Use it carefully.
               Critical use-permission found: "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"

[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lc/a/c/h1/d0/g;->B(Landroid/content/Context; Landroid/net/Uri;)Ljava/lang/String; (0x50) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/content/FileProvider;->g(Landroid/content/Context;
                    Ljava/lang/String;)Landroidx/core/content/FileProvider$a; (0xcc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lc/a/c/h1/t;->a(Landroid/content/Context; Landroid/net/Uri; Ljava/lang/String; Ljava/lang/String;)Ljava/lang/String;
                    (0x16) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lc/a/c/h1/d0/g;->D(Landroid/net/Uri;)Landroid/net/Uri; (0x64) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lc/a/c/h1/u;-><clinit>()V (0x0) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
                    Note that this enables or disables file system access only. Assets and resources are still accessible using
           file:///android_asset and file:///android_res.
                    The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
                    Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                               (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
                    Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:

               Methods where WebSettings is used, and setAllowFileAccess might be enabled by default:
               => Lc/a/c/s0/i;->a(Landroid/content/Context; Landroid/view/ViewGroup; I)Landroid/view/View;

[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lc/a/c/s0/i;->a(Landroid/content/Context; Landroid/view/ViewGroup; I)Landroid/view/View; (0x64) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lb/h/f/i;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x36) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0x3c) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x46) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/d;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x6c)
                    ---> Ljava/io/File;->delete()Z
               => Lc/c/a/f/m$a;->v()V (0xa) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/share/CustomShareActivity;->onActivityResult(I I Landroid/content/Intent;)V (0xc6) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/m0/d/d1;->a(Ljava/io/File;)V (0x24) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0xee) ---> Ljava/io/File;->delete()Z
               => Lb/s/a;->d(Landroid/content/Context;)V (0x16c) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/b1/f$u;->callback(Landroid/graphics/Bitmap; I I)V (0x48) ---> Ljava/io/File;->delete()Z
               => Lb/s/a;->d(Landroid/content/Context;)V (0xf8) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/f0/c/a;->b()V (0x2e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0x17a) --->
                    Ljava/io/File;->delete()Z
               => Lb/s/c;->b()V (0xb2) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0x134) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/c/e;->c(Landroid/content/Context;)V (0x24) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/i;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lb/s/c;->C()Ljava/util/List; (0x1d8) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/c0/b;->g()V (0x46) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0x92) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/d;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x8a)
                    ---> Ljava/io/File;->delete()Z
               => Lc/a/c/l0/s;->P(Z Lc/a/c/l0/l$c;)Ljava/io/File; (0x142) ---> Ljava/io/File;->delete()Z
               => Lb/s/c;->v(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File; Ljava/lang/String;)V (0x1fe) --->
                    Ljava/io/File;->delete()Z
               => Lc/c/a/h/d;->b(Ljava/io/File;)Landroid/graphics/Bitmap; (0x5c) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/f1/l/a/d$b;->run()V (0xb6) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0xa4) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/f1/l/a/a;->g()V (0xfa) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/f1/l/a/d;->b(Ljava/lang/String; Lc/a/c/f1/l/a/d$c;)V (0x154) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0xa4) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0x164) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/h;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0x11e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0x154) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;->clearWorkingFolder()V (0x58) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;->hasPendingSession()Z (0x54) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/c/e;->c(Landroid/content/Context;)V (0x48) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0xb6) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0xb8) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/d;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x74)
                    ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->d(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) --->
                    Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;-><init>(Lc/a/c/b1/p; J Ljava/lang/String;)V (0x76) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0x136) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/i;->b(Landroid/content/Context; Landroid/content/res/Resources; I)Ljava/nio/ByteBuffer; (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/d;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x40)
                    ---> Ljava/io/File;->delete()Z
               => Landroidx/core/content/FileProvider;->delete(Landroid/net/Uri; Ljava/lang/String; [Ljava/lang/String;)I (0xc) --->
                    Ljava/io/File;->delete()Z
               => Lc/c/a/h/d;->c(Ljava/lang/String;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lb/s/c;->v(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File; Ljava/lang/String;)V (0x134) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0x13e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/j0/e;->u(I Ljava/util/Set; Lc/a/c/j0/e$a;)Landroid/database/sqlite/SQLiteDatabase; (0xa2) --->
                    Ljava/io/File;->delete()Z
               => Lc/a/c/l0/s;->P(Z Lc/a/c/l0/l$c;)Ljava/io/File; (0x17e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->B(Ljava/io/File; Landroid/graphics/Bitmap; Landroid/graphics/Bitmap$CompressFormat; I Z)Z (0x120) --->
                    Ljava/io/File;->delete()Z
               => Lb/h/f/h;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x3e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0xdc) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0x184) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x40) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/c/e;->b()V (0x14) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;->clearSessionInfo()V (0x12) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;->onEndCapture()V (0x66) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x1c) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0xee) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/d;->b(Landroid/content/Context; Lb/h/e/c/c$b; Landroid/content/res/Resources; I)Landroid/graphics/Typeface; (0x82)
                    ---> Ljava/io/File;->delete()Z
               => Lc/a/c/m0/k/g;->g(Landroid/content/Context; Ljava/lang/String; Z Z)V (0x16e) ---> Ljava/io/File;->delete()Z
               => Lc/a/c/h1/c0/c;->e(Ljava/io/File; Ljava/io/File;)Z (0x104) ---> Ljava/io/File;->delete()Z
               => Lcom/adsk/sketchbook/tools/timelapse/TimelapseController;->hasPendingSession()Z (0x74) ---> Ljava/io/File;->delete()Z
               => Lb/h/f/h;->e(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface;
                    (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->update(I)V (0x38) ---> Ljava/io/File;->deleteOnExit()V

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lb/h/j/b;->h(Landroid/content/pm/PackageManager; Lb/h/j/a;
                    Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libopencv_java3.so]
               => Lc/a/c/h1/w;->b()V (0xe) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libcom-deviceinfo.so]
               => Lc/a/c/h1/w;->b()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libcom-paintcorewrapper-neon.so]
               => Lc/a/c/h1/w;->b()V (0x3e) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libcom-paintcorewrapper.so]
               => Lc/a/c/h1/w;->b()V (0x4a) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V

[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.adsk.sketchbook.gallery.grid.GridGallery
                 receiver => com.adsk.sketchbook.share.SharedTargetChooserBroadcastReceiver

[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <Debug><Hacker> Code for Checking Android Debug Mode:
           Did not detect code that checks whether debug mode is enabled
[Info] <Hacker> APK Installing Source Checking:
           Did not detect this app checks for APK installer sources.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Connection Checking:
           Did not discover urls that are not under SSL (Notice: if you encrypt the url string, we can not discover that).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info] <Strandhogg> Standhogg 2.0:
           This application does not seem to be vulnerable to the Standhogg 2.0 vulnerability
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 2.055103 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.011780507000025864 secs
Total elapsed time: 23.44548 secs
