**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: com.reader.books
Package Version Name: 2.50.1
Package Version Code: 65
Min Sdk: 16
Target Sdk: 30
MD5   : e7c734dd8cebc9f854fa53bd70fabc19
SHA1  : 5800452fe9aa7c6843cd7d056e927f990f60fb0e
SHA256: e8a8f04c5c5f64d3ddf94867dd60a1e5b56ed2d0a1bfc098c1f2611ad96ad904
SHA512: d2fc1028eb9b68f48f73700b30beeb370a7e7456c90bfef292d2ffad7b4f6b8604602366847b3b1bff49e12aa003577be042e27138b495980f913442d490c8c8
Analyze Signature: 0c104cfe429df06a76db7aa461f5145bb6b448ee53ca066909c958e571c075a217122725ed55319e964342332727afd058ada8e85aa1af784a4bb39366652fa3
------------------------------------------------------------------------------------------------
[Critical] <Hacker> Base64 String Encryption:
           Found Base64 encoding "String(s)" (Total: 2 ). We cannot guarantee all of the Strings are Base64 encoding and also we will not
           show you the decoded binary file:
               android.intent.action.MAIN
                   ->Original Encoding String: YW5kcm9pZC5pbnRlbnQuYWN0aW9uLk1BSU4=
                   ->From class: Lcom/yandex/metrica/impl/ob/ar;->a(Z)Lcom/yandex/metrica/impl/ob/ar;
               android.intent.category.LAUNCHER
                   ->Original Encoding String: YW5kcm9pZC5pbnRlbnQuY2F0ZWdvcnkuTEFVTkNIRVI=
                   ->From class: Lcom/yandex/metrica/impl/ob/ar;->a(Z)Lcom/yandex/metrica/impl/ob/ar;

[Critical] <KeyStore><Hacker> KeyStore Protection Checking:
           The Keystores below seem using "byte array" or "hard-coded cert info" to do SSL pinning (Total: 3). Please manually check:
               => Lcom/google/api/client/http/javanet/NetHttpTransport$Builder;->trustCertificatesFromStream(Ljava/io/InputStream;)Lcom/goog
                    le/api/client/http/javanet/NetHttpTransport$Builder; (0xa) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream;
                    [C)V
               => Lcom/google/api/client/testing/json/webtoken/TestCertificates$CertData;->getTrustManager()Ljavax/net/ssl/X509TrustManager;
                    (0x12) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/google/api/client/http/apache/ApacheHttpTransport$Builder;->trustCertificatesFromStream(Ljava/io/InputStream;)Lcom/go
                    ogle/api/client/http/apache/ApacheHttpTransport$Builder; (0xa) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream;
                    [C)V

[Critical]  App Sandbox Permission Checking:
           Security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found (Please check:
           https://www.owasp.org/index.php/Mobile_Top_10_2014-M2):
               [openFileOutput]
               => Lcom/yandex/metrica/impl/ob/am;->a(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String;)V (0x2e) --->
                    Landroid/content/Context;->openFileOutput(Ljava/lang/String; I)Ljava/io/FileOutputStream;
               --------------------------------------------------

[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
               Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.yandex.metrica.MetricaService

[Critical] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           This app allows Self-defined HOSTNAME VERIFIER to accept all Common Names(CN).
                   This is a critical vulnerability and allows attackers to do MITM attacks with his valid certificate without your
           knowledge.
                   Case example:
                   (1)http://osvdb.org/96411
                   (2)http://www.wooyun.org/bugs/wooyun-2010-042710
                   (3)http://www.wooyun.org/bugs/wooyun-2010-052339
                   Also check Google doc: http://developer.android.com/training/articles/security-ssl.html (Caution: Replacing
           HostnameVerifier can be very dangerous).
                   OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
                   Check this book to see how to solve this issue: http://goo.gl/BFb65r

                   To see what's the importance of Common Name(CN) verification.
                   Use Google Chrome to navigate:
                    - https://www.google.com   => SSL certificate is valid
                    - https://60.199.175.158/  => This is the IP address of google.com, but the CN is not match, making the certificate
           invalid. You still can go Google.com but now you cannot distinguish attackers from normal users

                   Please check the code inside these methods:
               Lcom/flurry/sdk/eh;->verify(Ljava/lang/String; Ljavax/net/ssl/SSLSession;)Z
               Lcom/google/api/client/util/SslUtils$b;->verify(Ljava/lang/String; Ljavax/net/ssl/SSLSession;)Z

[Critical] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           This app does not check the validation of the CN(Common Name) of the SSL certificate ("ALLOW_ALL_HOSTNAME_VERIFIER" field or
           "AllowAllHostnameVerifier" class).
                   This is a critical vulnerability and allows attackers to do MITM attacks with his valid certificate without your
           knowledge.
                   Case example:
                   (1)http://osvdb.org/96411
                   (2)http://www.wooyun.org/bugs/wooyun-2010-042710
                   (3)http://www.wooyun.org/bugs/wooyun-2010-052339
                   Also check Google doc: http://developer.android.com/training/articles/security-ssl.html (Caution: Replacing
           HostnameVerifier can be very dangerous).
                   OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
                   Check this book to see how to solve this issue: http://goo.gl/BFb65r

                   To see what's the importance of Common Name(CN) verification.
                   Use Google Chrome to navigate:
                    - https://www.google.com   => SSL certificate is valid
                    - https://60.199.175.158/  => This is the IP address of google.com, but the CN is not match, making the certificate
           invalid. You still can go Google.com but now you cannot distinguish attackers from normal users

                   Please check the code inside these methods:
               => Lcom/google/api/client/http/apache/ApacheHttpTransport$Builder;->doNotValidateCertificate()Lcom/google/api/client/http/apa
                    che/ApacheHttpTransport$Builder; (0x1a) --->
                    Lorg/apache/http/conn/ssl/SSLSocketFactory;->setHostnameVerifier(Lorg/apache/http/conn/ssl/X509HostnameVerifier;)V

[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 4):
               http://169.254.169.254
                   ->From class: Lcom/google/api/client/googleapis/auth/oauth2/OAuth2Utils;->a(Llg0;)Ljava/lang/String;
               http://api.temafon.ru/book/
                   ->From class: Lcom/reader/books/api/ApiHelperCommon;-><init>(Landroid/content/Context;)V
               http://google.com/
                   ->From class: Lcom/google/api/client/testing/http/HttpTesting;-><clinit>()V
                   ->From class: Lmg0;->c()V
               http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail
                   ->From class: Lcom/neverland/engbook/level2/AlFormatFB3;->externPrepareTAG()Z

[Critical] <SSL_Security> SSL Certificate Verification Checking:
           This app DOES NOT check the validation of SSL Certificate. It allows self-signed, expired or mismatch CN certificates for SSL
           connection.
               This is a critical vulnerability and allows attackers to do MITM attacks without your knowledge.
               If you are transmitting users' username or password, these sensitive information may be leaking.
               Reference:
               (1)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
               (2)Android Security book: http://goo.gl/BFb65r
               (3)https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=134807561
               This vulnerability is much more severe than Apple's "goto fail" vulnerability: http://goo.gl/eFlovw
               Please do not try to create a "X509Certificate" and override "checkClientTrusted", "checkServerTrusted", and
           "getAcceptedIssuers" functions with blank implementation.
               We strongly suggest you use the existing API instead of creating your own X509Certificate class.
               Please modify or remove these vulnerable code:

               [Confirm Vulnerable]
               => Lcom/google/api/client/util/SslUtils$a;
                     -> used by: Lcom/google/api/client/util/SslUtils;->trustAllSSLContext()Ljavax/net/ssl/SSLContext;
               --------------------------------------------------
               [Maybe Vulnerable (Please manually confirm)]
               => Lcom/flurry/sdk/ej;
                     -> used by: Lcom/flurry/sdk/ei;->a()Ljavax/net/ssl/SSLContext;
                     -> used by: Lcom/flurry/sdk/en;->m()Ljavax/net/ssl/SSLContext;
               => Lcom/sun/mail/util/MailSSLSocketFactory$MailTrustManager;
                     -> used by: Lcom/sun/mail/util/MailSSLSocketFactory;-><init>(Ljava/lang/String;)V

[Critical] <Strandhogg> Standhogg 2.0:
           This application is vulnerable to the Standhogg 2.0 vulnerability. Please set activity launchModes to 'singleTask' or
           'singleInstance'. Please see https://promon.co/strandhogg-2-0/ for more details
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/reader/books/mvp/presenters/DocumentsFileListPresenter;->getTargetFilesPath()Ljava/lang/String; (0x36) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/utils/files/FileSearcher;->findFiles(Lcom/reader/books/utils/files/FileSearchConfig;)Ljava/util/Map;
                    (0xc) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/mvp/presenters/FilePickerFileListPresenter;-><clinit>()V (0x32) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/mvp/presenters/BaseFileListPresenter;->loadFileList()V (0x9a) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/content/FileProvider;->b(Landroid/content/Context;
                    Ljava/lang/String;)Landroidx/core/content/FileProvider$a; (0xcc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/os/EnvironmentCompat;->getStorageState(Ljava/io/File;)Ljava/lang/String; (0x30) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/mvp/presenters/FolderManagerPresenter;->loadFolderList(Ljava/lang/String;)V (0x2a) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/utils/files/sdcard/StorageList;-><init>(Landroid/content/Context; Z I)V (0x3e) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/reader/books/mvp/presenters/FileManagerPresenter;->access$processFileManagerEvent(Lcom/reader/books/mvp/presenters/Fi
                    leManagerPresenter; Lcom/reader/books/interactors/filemanager/event/FileManagerEvent;)V (0xa8) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
               These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't
           want to.
               You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                  service => com.yandex.metrica.MetricaService
                 receiver => com.yandex.metrica.ConfigurationServiceReceiver

[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all
           if, in this situation, your app should regard this as the same device.
               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for
           example zeros or asterisks.
               If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lcom/flurry/sdk/dy;->b()V (0x26) ---> Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/yandex/metrica/impl/ob/uz$1;->a(Landroid/telephony/TelephonyManager;)Ljava/lang/String; (0x2c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;

[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
                    ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on
           releases of Android prior to 2.2 (Froyo).
                    Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every
           instance has the same ANDROID_ID.
                    If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
                    Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Lcom/google/firebase/crashlytics/internal/common/CommonUtils;->isEmulator(Landroid/content/Context;)Z (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lh70;->zzb(Ljava/util/Map;)Lcom/google/android/gms/internal/gtm/zzl; (0x10) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/measurement/internal/zzkl;->F(Lcom/google/android/gms/measurement/internal/zzaq;
                    Lcom/google/android/gms/measurement/internal/zzn;)V (0xe00) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/yandex/metrica/impl/ob/v$a;->a(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Li80;->zzb(Ljava/util/Map;)Lcom/google/android/gms/internal/gtm/zzl; (0x10) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/flurry/sdk/ea;->b()Ljava/lang/String; (0x1c) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;

[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/reader/books/data/browser/WebViewHelper;->createWebView(Landroid/content/Context;
                    Lcom/reader/books/data/browser/IBrowserWebViewClient;
                    Lcom/reader/books/data/browser/IBrowserWebViewChromeClient;)Lcom/reader/books/data/browser/WebViewTab; (0xf8) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               /system/bin/
                   ->From class: Lcom/yandex/metrica/impl/ob/bt$b;-><clinit>()V
               /system/bin/failsafe/
                   ->From class: Lcom/yandex/metrica/impl/ob/bt$b;-><clinit>()V
               su
                   ->From class: Lcom/yandex/metrica/impl/ob/bt$b;->b()Z
               su.so
                   ->From class: Lcom/yandex/metrica/impl/ob/v$1;-><init>(Lcom/yandex/metrica/impl/ob/v;)V

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Lf2;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String;
                    I)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/db/synchronization/ImportSyncDataManager;->updateDatabaseFromJson(Ljava/lang/String;
                    Z)Lcom/reader/books/data/db/synchronization/FullSyncResult; (0x2b0) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/fileprocessor/ZipPreProcessor;->b(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Ljava/util/Set; I)Ljava/util/Set; (0xf8) ---> Ljava/io/File;->delete()Z
               => Lz4;->g()Ljava/util/List; (0x1d4) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence;->deleteAllReports()V (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/ZipHelper;->extractFileFromZip(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)Z
                    (0x4ca) ---> Ljava/io/File;->delete()Z
               => Lcd2;->deleteRecursively(Ljava/io/File;)Z (0x36) ---> Ljava/io/File;->delete()Z
               => Ld2;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x7c) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromInputStream(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) --->
                    Ljava/io/File;->delete()Z
               => Lnet/lingala/zip4j/tasks/AbstractExtractFileTask;->extractFile(Lnet/lingala/zip4j/io/inputstream/ZipInputStream;
                    Lnet/lingala/zip4j/model/FileHeader; Ljava/lang/String; Ljava/lang/String; Lnet/lingala/zip4j/progress/ProgressMonitor;
                    [B)V (0x2cc) ---> Ljava/io/File;->delete()Z
               => Lw80;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x7c) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/book/BookManager;->addFileToLibrary(Ljava/lang/String; Z Lcom/reader/books/data/book/ImportSource;
                    Ljava/lang/String; Ljava/lang/Long; Ljava/util/Set;
                    Ljava/lang/String;)Lcom/reader/books/data/book/AddFileToLibraryResult; (0xa0) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x40) ---> Ljava/io/File;->delete()Z
               => Lcd2;->createTempDir(Ljava/lang/String; Ljava/lang/String; Ljava/io/File;)Ljava/io/File; (0x12) --->
                    Ljava/io/File;->delete()Z
               =>
                    Lcom/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence;->loadFinalizedReports()Ljava/util/Li
                    st; (0xb8) ---> Ljava/io/File;->delete()Z
               => Ly2;->delete()Z (0xe) ---> Ljava/io/File;->delete()Z
               => Lcd2;->copyRecursively(Ljava/io/File; Ljava/io/File; Z Lkotlin/jvm/functions/Function2;)Z (0x12c) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/core/content/FileProvider;->delete(Landroid/net/Uri; Ljava/lang/String; [Ljava/lang/String;)I (0xc) --->
                    Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/book/BookManager;->removeBooksInternal(Landroid/content/Context; Ljava/util/Set;)V (0x50) --->
                    Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/db/synchronization/SyncLogger;->clearLogFilesDirectory()V (0xfa) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/cloud/GoogleDriveManager;->m(Ljava/lang/String;)V (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/dj;->C()V (0x10e) ---> Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/cm$j;->b(Landroid/content/Context;)V (0x72) ---> Ljava/io/File;->delete()Z
               => Luj2;->b(Z Ljava/io/File; Ljava/io/File;)V (0x3e) ---> Ljava/io/File;->delete()Z
               => Ld70;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x1e) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence;->deleteFinalizedReport(Ljava/lang/Stri
                    ng;)V (0x72) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String;
                    I)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/bj;->a(Ljava/lang/String; Lcom/yandex/metrica/impl/ob/wm; Z)V (0x50) --->
                    Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/am;->c(Landroid/content/Context; Ljava/lang/String;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lc21;->b(Ljava/lang/Long; Ljava/io/File; Ljava/lang/String;)Ljava/lang/String; (0xd2) ---> Ljava/io/File;->delete()Z
               => Lz4;->b(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File; Ljava/lang/String;)V (0xc6) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/SessionReport;->remove()V (0x38) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0xe) ---> Ljava/io/File;->delete()Z
               => Lgx;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x9c) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/Files;->move(Ljava/io/File; Ljava/io/File;)V (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/db/synchronization/SyncLogger;->clearLogFilesDirectory()V (0xda) ---> Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/ke;->run()V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/fd;->a(Ljava/io/File; Ljava/lang/String;)V (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/book/BookDetailsCollector;->a(Lcom/reader/books/data/book/BookInfo;
                    Lcom/neverland/engbook/forpublic/AlBookProperties;)Ljava/io/File; (0x52) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x6c) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->d(Ljava/io/File;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromInputStream(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/firebase/installations/local/PersistedInstallation;->clearForTesting()V (0x4) ---> Ljava/io/File;->delete()Z
               => Luv0;->d()V (0x18) ---> Ljava/io/File;->delete()Z
               => Lcd2;->copyTo(Ljava/io/File; Ljava/io/File; Z I)Ljava/io/File; (0x30) ---> Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->delete(Ljava/io/File;)V (0x0) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromInputStream(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) --->
                    Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/df;->c()Z (0x14) ---> Ljava/io/File;->delete()Z
               => Lk90;->run()V (0x56) ---> Ljava/io/File;->delete()Z
               => Ly2;->a(Ljava/io/File;)Z (0x32) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/dg;->a(Ljava/io/File;)Z (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0x3c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x1c) ---> Ljava/io/File;->delete()Z
               => Ld2;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x50) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/BitmapTeleporter;->writeToParcel(Landroid/os/Parcel; I)V (0x6c) --->
                    Ljava/io/File;->delete()Z
               => Luj2;->b(Z Ljava/io/File; Ljava/io/File;)V (0x4) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence;->finalizeReports(Ljava/lang/String;
                    J)V (0x380) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/data/book/BookManager;->deleteCoverPageFile(Lcom/reader/books/data/book/BookInfo;)V (0xc) --->
                    Ljava/io/File;->delete()Z
               => Ltu0;->e(I Z)V (0x11c) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/ZipHelper;->extractFileFromZip(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)Z
                    (0x2f2) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/mvp/presenters/MainPresenter;->c(Ljava/lang/String; Ljava/lang/String; Z Ljava/lang/String; Z)V (0x1a4)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/cy;->a()V (0x6) ---> Ljava/io/File;->delete()Z
               => Lcom/flurry/sdk/fd;->b(Ljava/io/File;)Z (0x44) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/FileUtils;->deleteFilesWithTargetPrefix(Ljava/io/File; Ljava/lang/String;)V (0x46) --->
                    Ljava/io/File;->delete()Z
               => Lc10;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x40) ---> Ljava/io/File;->delete()Z
               => Ld2;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x92) ---> Ljava/io/File;->delete()Z
               => Lp8;->b(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lfv0;->call()Ljava/lang/Object; (0x62) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String;
                    I)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/CrashlyticsCore$c;->call()Ljava/lang/Object; (0x10) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->openRead()Ljava/io/FileInputStream; (0x14) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromResourcesFontFile(Landroid/content/Context; Landroid/content/res/Resources; I Ljava/lang/String;
                    I)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/ZipHelper;->extractFileFromZip(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;)Z
                    (0x386) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence;->i(Ljava/io/File;)V (0x32) --->
                    Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/am;->b(Landroid/content/Context; Ljava/lang/String;)V (0x32) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->j()V (0x18c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->finishWrite(Ljava/io/FileOutputStream;)V (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0x4) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDex;->b(Landroid/content/Context;)V (0x84) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/NativeSessionReport;->remove()V (0x80) --->
                    Ljava/io/File;->delete()Z
               => Lcom/reader/books/cloud/GoogleDriveManager;->c(Lcom/google/api/services/drive/Drive; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/CharSequence; Lcom/reader/books/cloud/ICloudFileManager$IDownloadProgressListener;
                    Ljava/lang/Long;)Ljava/lang/String; (0x3fe) ---> Ljava/io/File;->delete()Z
               => Ld2;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x84) ---> Ljava/io/File;->delete()Z
               => Lcom/reader/books/utils/files/ZipHelper;->unzip(Ljava/lang/String; Ljava/lang/String; Ljava/util/Set; Z I Z Z
                    Z)Ljava/lang/String; (0x17e) ---> Ljava/io/File;->delete()Z
               => Lcv0;->call()Ljava/lang/Object; (0x5e) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/common/Utils;->c(Ljava/io/File;)V (0x2c) ---> Ljava/io/File;->delete()Z
               => Ltu0;->b(Ltu0;)Lcom/google/android/gms/tasks/Task; (0xd2) ---> Ljava/io/File;->delete()Z
               => Ltu0;->e(I Z)V (0xd0) ---> Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/bj;->a(Ljava/lang/String; Lcom/yandex/metrica/impl/ob/wm; Z)V (0x66) --->
                    Ljava/io/File;->delete()Z
               => Ltu0;->e(I Z)V (0x8de) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDex;->b(Landroid/content/Context;)V (0xc6) ---> Ljava/io/File;->delete()Z
               => Lz4;->g()Ljava/util/List; (0xa0) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/report/model/NativeSessionReport;->remove()V (0x44) --->
                    Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->remove(Ljava/lang/String;)Z (0x44) ---> Ljava/io/File;->delete()Z
               => Lcom/yandex/metrica/impl/ob/kc;->a(Ljava/io/File;)Z (0x1c) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->open(Ljava/io/File; I I J)Lcom/bumptech/glide/disklrucache/DiskLruCache;
                    (0x44) ---> Ljava/io/File;->delete()Z
               => Lf2;->createFromInputStream(Landroid/content/Context; Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Ld2;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x9a) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->startWrite()Ljava/io/FileOutputStream; (0x76) ---> Ljava/io/File;->delete()Z
               => Lcom/sun/mail/pop3/TempFile;->close()V (0xe) ---> Ljava/io/File;->delete()Z
               => Lcom/google/firebase/crashlytics/internal/log/LogFileManager;->discardOldLogFiles(Ljava/util/Set;)V (0x58) --->
                    Ljava/io/File;->delete()Z
               => Lokhttp3/internal/io/FileSystem$1;->deleteContents(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lgl;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase; (0x5c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->failWrite(Ljava/io/FileOutputStream;)V (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x62) ---> Ljava/io/File;->delete()Z
               => Lou0;->run()V (0xe2) ---> Ljava/io/File;->delete()Z
               => Lz4;->b(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File; Ljava/lang/String;)V (0x190) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/common/io/FileBackedOutputStream;->reset()V (0xb8) ---> Ljava/io/File;->delete()Z
               => Lcom/sun/mail/pop3/TempFile;-><init>(Ljava/io/File;)V (0x1a) ---> Ljava/io/File;->deleteOnExit()V
               => Lcom/google/common/io/FileBackedOutputStream;->b(I)V (0x34) ---> Ljava/io/File;->deleteOnExit()V

[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Detected code that checks whether debug mode is enabled in:
               Lcom/google/android/gms/common/GoogleSignatureVerifier;->b(Ljava/lang/String;)Lki;
               Lcom/google/firebase/crashlytics/internal/common/CommonUtils;->isAppDebuggable(Landroid/content/Context;)Z
               Lcom/yandex/metrica/impl/ob/sq$a;->a(Landroid/content/pm/ApplicationInfo;)Ljava/lang/String;

[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/google/android/gms/measurement/internal/zzen;->zzz()V (0x5a) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/firebase/crashlytics/internal/common/IdManager;->getInstallerPackageName()Ljava/lang/String; (0x22) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/analytics/zzk;->zzat()Lcom/google/android/gms/internal/gtm/zzq; (0x3a) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lzs0;->extract(Ljava/lang/Object;)Ljava/lang/String; (0x14) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;

[Notice] <KeyStore><Hacker> KeyStore File Location:
           BKS Keystore file:
               com/google/api/client/googleapis/google.jks

[Notice] <KeyStore><Hacker> Possible KeyStore File Location:
           BKS possible keystore file:
               stamp-cert-sha256

[Notice] <KeyStore><Hacker> KeyStore Protection Information:
           The Keystores below are "protected" by password and seem using SSL-pinning (Total: 1). You can use "Portecle" tool to manage the
           certificates in the KeyStore:
               => Lcom/google/api/client/util/SecurityUtils;->loadKeyStore(Ljava/security/KeyStore; Ljava/io/InputStream;
                    Ljava/lang/String;)V (0x8) ---> Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/GooglePlayServicesUtilLight;->isGooglePlayServicesAvailable(Landroid/content/Context; I)I
                    (0xfc) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Landroidx/core/provider/FontsContractCompat;->getProvider(Landroid/content/pm/PackageManager;
                    Landroidx/core/provider/FontRequest; Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GoogleSignatureVerifier;->b(Ljava/lang/String;)Lki; (0xb6) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/util/UidVerifier;->isGooglePlayServicesUid(Landroid/content/Context; I)Z (0x20) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Notice]  Native Library Loading Checking:
           Native library loading codes(System.loadLibrary(...)) found:
               [libRSSupport.so]
               => Landroidx/renderscript/RenderScript;->internalCreate(Landroid/content/Context; I
                    Landroidx/renderscript/RenderScript$ContextType; I)Landroidx/renderscript/RenderScript; (0x1f6) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libRSSupportIO.so]
               => Landroidx/renderscript/RenderScript;->internalCreate(Landroid/content/Context; I
                    Landroidx/renderscript/RenderScript$ContextType; I)Landroidx/renderscript/RenderScript; (0x2b0) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libebx-native.so]
               => Lcom/reader/books/api/ApiHelper;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libCHMlibrary.so]
               => Lcom/neverland/engbook/level1/RealCHM;-><clinit>()V (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libblasV8.so]
               => Landroidx/renderscript/RenderScript;->internalCreate(Landroid/content/Context; I
                    Landroidx/renderscript/RenderScript$ContextType; I)Landroidx/renderscript/RenderScript; (0x2e0) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [librsjni_androidx.so]
               => Landroidx/renderscript/RenderScript;->internalCreate(Landroid/content/Context; I
                    Landroidx/renderscript/RenderScript$ContextType; I)Landroidx/renderscript/RenderScript; (0x104) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libYandexMetricaNativeModule.so]
               => Lcom/yandex/metrica/impl/ac/NativeCrashesHelper;->a()Z (0x4) ---> Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
               [libRSSupport.so]
               => Landroidx/renderscript/RenderScript;->nScriptIntrinsicCreate(I J Z)J (0x24) --->
                    Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V

[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.reader.books.gui.activities.InputFileIntentActivity
                 receiver => com.reader.books.widget.WidgetProvider
                 receiver => com.yandex.metrica.MetricaEventHandler
                 receiver => com.zedtema.statisticslib.ConnectionChangesBroadcastReceiver

[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView> WebView Local File Access Attacks Checking:
           Did not find potentially critical local file access settings.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 5.726787 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.8422205580000082 secs
Total elapsed time: 72.347429 secs
