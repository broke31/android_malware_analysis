**********************************************************************************************
**           AndroBugs Framework - Android App Security Vulnerability Scanner               **
**                                    version: 2.0.0                                        **
** This tool was originally created by Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)  **
**                     Modifications by Jasper van Thuijl & Noam Drong                      **
**********************************************************************************************
Platform: Android
Package Name: totalcarcheck.co.uk
Package Version Name: 4.1.0
Package Version Code: 111410
Min Sdk: 22
Target Sdk: 29
MD5   : c20beae85689bd27a57ae61a6ad1ba9f
SHA1  : 6a12c2e008c1a76b28bf62c4bc97717e1b6fe0c9
SHA256: 7077e876bbb4000721a812991c2c83a82535512df9fd1394d461e31b302c75a2
SHA512: 6eea68be14a58f49042fce59ce5f13ccc192152e31f6ae15e89ce2210a6c9db3dd77bfd7da2faf281540657493d7c28f2aa8aef39ee4a422e8bfc2931baffda3
Analyze Signature: df2aaafcab96bc492799ffebb0424a218fc6b9f34ea89aab2a7d11c33eef31c75b713c6803a5d039b4a0205fae20669cbf747fb70514cc4fde659d99656c9e95
------------------------------------------------------------------------------------------------
[Critical] <Hacker> Base64 String Encryption:
           Found Base64 encoding "String(s)" (Total: 2 ). We cannot guarantee all of the Strings are Base64 encoding and also we will not
           show you the decoded binary file:
               AndroidMagnes
                   ->Original Encoding String: QW5kcm9pZE1hZ25lcw==
                   ->From class: Llib/android/paypal/com/magnessdk/e;->g()Ljava/lang/String;
               HmacSHA256
                   ->Original Encoding String: SG1hY1NIQTI1Ng==
                   ->From class: Llib/android/paypal/com/magnessdk/i;->a(Ljava/lang/String; Ljava/lang/String; J
                    Ljava/lang/String;)Ljava/lang/String;

[Critical] <KeyStore><Hacker> KeyStore Protection Checking:
           The Keystores below seem using "byte array" or "hard-coded cert info" to do SSL pinning (Total: 2). Please manually check:
               => Llib/android/paypal/com/magnessdk/network/base/f;->b()[Ljavax/net/ssl/TrustManager; (0x1a) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V
               => Lcom/braintreepayments/api/internal/TLSSocketFactory;-><init>(Ljava/io/InputStream;)V (0x18) --->
                    Ljava/security/KeyStore;->load(Ljava/io/InputStream; [C)V

[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total: 3):
               http://10.0.2.2:3000/
                   ->From class: Lcom/braintreepayments/api/models/TokenizationKey$BraintreeEnvironment;-><clinit>()V
               http://play.google.com/store/account/subscriptions
                   ->From class: Lcc/fovea/PurchasePlugin;->execute(Ljava/lang/String; Lorg/json/JSONArray;
                    Lorg/apache/cordova/CallbackContext;)Z
               http://play.google.com/store/paymentmethods
                   ->From class: Lcc/fovea/PurchasePlugin;->execute(Ljava/lang/String; Lorg/json/JSONArray;
                    Lorg/apache/cordova/CallbackContext;)Z

[Critical] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           DO NOT use "handler.proceed();" inside those methods in extended "WebViewClient", which allows the connection even if the SSL
           Certificate is invalid (MITM Vulnerability).
               References:
               (1)A View To A Kill: WebView Exploitation: https://www.iseclab.org/papers/webview_leet13.pdf
               (2)OWASP Mobile Top 10 doc: https://www.owasp.org/index.php/Mobile_Top_10_2014-M3
               (3)https://jira.appcelerator.org/browse/TIMOB-4488
               Vulnerable codes:

               Lorg/apache/cordova/engine/SystemWebViewClient;-> onReceivedSslError(Landroid/webkit/WebView;
                    Landroid/webkit/SslErrorHandler; Landroid/net/http/SslError;)V

[Critical] <Strandhogg> Standhogg 2.0:
           This application is vulnerable to the Standhogg 2.0 vulnerability. Please set activity launchModes to 'singleTask' or
           'singleInstance'. Please see https://promon.co/strandhogg-2-0/ for more details
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Llib/android/paypal/com/magnessdk/i;->f()Ljava/lang/String; (0x14) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Llib/android/paypal/com/magnessdk/a/a;-><init>()V (0x16) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Llib/android/paypal/com/magnessdk/h$a;->i()Z (0xe) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/content/FileProvider;->parsePathStrategy(Landroid/content/Context;
                    Ljava/lang/String;)Landroidx/core/content/FileProvider$PathStrategy; (0xcc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Llib/android/paypal/com/magnessdk/h;->c()J (0x4) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/os/EnvironmentCompat;->getStorageState(Ljava/io/File;)Ljava/lang/String; (0x34) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;

[Warning] <Sensitive_Information> Getting IMEI and Device ID:
           This app has code getting the "device id(IMEI)" but there are problems with this "TelephonyManager.getDeviceId()" approach.
               1.Non-phones: Wifi-only devices or music players that don't have telephony hardware just don't have this kind of unique
           identifier.
               2.Persistence: On devices which do have this, it persists across device data wipes and factory resets. It's not clear at all
           if, in this situation, your app should regard this as the same device.
               3.Privilege:It requires READ_PHONE_STATE permission, which is irritating if you don't otherwise use or need telephony.
               4.Bugs: We have seen a few instances of production phones for which the implementation is buggy and returns garbage, for
           example zeros or asterisks.
               If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
               Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Llib/android/paypal/com/magnessdk/i;->a(I Llib/android/paypal/com/magnessdk/MagnesSettings;)V (0x552) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;
               => Lcom/cardinalcommerce/shared/cs/f/l;-><init>(Landroid/content/Context;)V (0x3c) --->
                    Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;

[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
                    ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on
           releases of Android prior to 2.2 (Froyo).
                    Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every
           instance has the same ANDROID_ID.
                    If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
                    Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html

               => Llib/android/paypal/com/magnessdk/h;->c(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lmobi/monaca/plugin/MonacaPlugin;->getDeviceId(Landroid/content/Context;)Ljava/lang/String; (0xc) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;
               => Lcom/cardinalcommerce/shared/cs/f/k;-><init>(Landroid/content/Context;)V (0x488) --->
                    Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver; Ljava/lang/String;)Ljava/lang/String;

[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
                    Note that this enables or disables file system access only. Assets and resources are still accessible using
           file:///android_asset and file:///android_res.
                    The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
                    Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                               (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
                    Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:

               Methods where WebSettings is used, and setAllowFileAccess might be enabled by default:
               => Lcom/cardinalcommerce/cardinalmobilesdk/a/c/a$1;->run()V
               => Lcom/cardinalcommerce/shared/cs/userinterfaces/ChallengeHTMLView;->onCreate(Landroid/os/Bundle;)V
               => Llib/android/paypal/com/magnessdk/h;->j(Landroid/content/Context;)Lorg/json/JSONObject;

[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/cardinalcommerce/cardinalmobilesdk/a/c/a$1;->run()V (0x36) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V

[Notice]  AndroidManifest Adb Backup Checking:
           ADB Backup is ENABLED for this app (default: ENABLED). ADB Backup is a good tool for backing up all of your files. If it's open
           for this app, people who have your phone can copy all of the sensitive data for this app in your phone (Prerequisite: 1.Unlock
           phone's screen 2.Open the developer mode). The sensitive data may include lifetime access token, username or password, etc.
               Security case related to ADB Backup:
               1.http://www.securityfocus.com/archive/1/530288/30/0/threaded
               2.http://blog.c22.cc/advisories/cve-2013-5112-evernote-android-insecure-storage-of-pin-data-bypass-of-pin-protection/
               3.http://nelenkov.blogspot.co.uk/2012/06/unpacking-android-backups.html
               Reference: http://developer.android.com/guide/topics/manifest/application-element.html#allowbackup

[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               su
                   ->From class: Llib/android/paypal/com/magnessdk/c$k$a;-><clinit>()V
                   ->From class: Lcom/cardinalcommerce/shared/cs/f/j;->j()Z
                   ->From class: Lcom/braintreepayments/api/internal/AnalyticsSender;->isDeviceRooted()Ljava/lang/String;
               /system/bin/su
                   ->From class: Lcom/cardinalcommerce/shared/cs/f/j;->i()Z
               /system/bin/failsafe/su
                   ->From class: Lcom/cardinalcommerce/shared/cs/f/j;->i()Z
               /system/bin/qemu-props
                   ->From class: Llib/android/paypal/com/magnessdk/c$f;-><clinit>()V
               /system/bin/noxd
                   ->From class: Llib/android/paypal/com/magnessdk/c$f;-><clinit>()V
               /system/bin/
                   ->From class: Llib/android/paypal/com/magnessdk/c$k;-><clinit>()V
               /system/bin/.ext/
                   ->From class: Llib/android/paypal/com/magnessdk/c$k;-><clinit>()V
               /system/bin/failsafe/
                   ->From class: Llib/android/paypal/com/magnessdk/c$k;-><clinit>()V
               /system/bin/.ext/.su/
                   ->From class: Llib/android/paypal/com/magnessdk/c$k;-><clinit>()V

[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
               Please make sure do not use "file.delete()" to delete essential files.
               Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x2c) ---> Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/RawDocumentFile;->delete()Z (0xe) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->startWrite()Ljava/io/FileOutputStream; (0x7e) ---> Ljava/io/File;->delete()Z
               => Llib/android/paypal/com/magnessdk/a/a;->c(Ljava/lang/String;)Z (0xe) ---> Ljava/io/File;->delete()Z
               => Llib/android/paypal/com/magnessdk/a/c;->c(Ljava/io/File;)Z (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x82) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->finishWrite(Ljava/io/FileOutputStream;)V (0x14) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/play/core/assetpacks/bb;->c(Ljava/io/File;)Z (0x30) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/play/core/assetpacks/dr;->a([B I)V (0x88) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/play/core/assetpacks/df;->a(Ljava/io/File; Ljava/io/File;)V (0x44) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x6c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/content/FileProvider;->delete(Landroid/net/Uri; Ljava/lang/String; [Ljava/lang/String;)I (0xc) --->
                    Ljava/io/File;->delete()Z
               => Lcom/google/android/gms/common/data/BitmapTeleporter;->zabz()Ljava/io/FileOutputStream; (0x32) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/RawDocumentFile;->deleteContents(Ljava/io/File;)Z (0x32) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->openRead()Ljava/io/FileInputStream; (0x14) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/play/core/assetpacks/dj;->a(Lcom/google/android/play/core/assetpacks/dh;)V (0x98) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x8a) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0xe) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x36) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->failWrite(Ljava/io/FileOutputStream;)V (0x14) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x74) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x40) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0x4) ---> Ljava/io/File;->delete()Z
               => Lcom/google/android/play/core/splitcompat/c;->c(Ljava/io/File;)V (0x3e) ---> Ljava/io/File;->delete()Z

[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Detected code that checks whether debug mode is enabled in:
               Lcom/google/android/gms/common/GoogleSignatureVerifier;->zza(Ljava/lang/String; I)Lcom/google/android/gms/common/zzm;
               Lcom/google/android/gms/common/GoogleSignatureVerifier;->zzc(Ljava/lang/String;)Lcom/google/android/gms/common/zzm;
               Lorg/apache/cordova/engine/SystemWebViewClient;->onReceivedSslError(Landroid/webkit/WebView; Landroid/webkit/SslErrorHandler;
                    Landroid/net/http/SslError;)V
               Lorg/apache/cordova/engine/SystemWebViewEngine;->initWebViewSettings()V

[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/cardinalcommerce/shared/cs/f/j;->a(Landroid/content/Context;)Z (0x10) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/cardinalcommerce/shared/cs/f/a;-><init>(Landroid/content/Context;)V (0xa2) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;

[Notice] <Hacker> Code Setting Preventing Screenshot Capturing:
           This app has code setting the preventing screenshot capturing.
                    Example: getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
                    It is used by the developers to protect the app:
               => Lcom/cardinalcommerce/shared/cs/userinterfaces/ChallengeNativeView;->onCreate(Landroid/os/Bundle;)V (0x2a) --->
                    Landroid/view/Window;->setFlags(I I)V
               => Lcom/cardinalcommerce/shared/cs/userinterfaces/ChallengeHTMLView;->onCreate(Landroid/os/Bundle;)V (0x2a) --->
                    Landroid/view/Window;->setFlags(I I)V
               => Lcom/braintreepayments/cardform/view/CardForm;->setup(Landroidx/appcompat/app/AppCompatActivity;)V (0x32) --->
                    Landroid/view/Window;->setFlags(I I)V

[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/google/android/gms/common/util/UidVerifier;->isGooglePlayServicesUid(Landroid/content/Context; I)Z (0x20) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/play/core/internal/by;->a(Landroid/content/Context;)Z (0x12) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/wrappers/PackageManagerWrapper;->zza(Ljava/lang/String; I
                    I)Landroid/content/pm/PackageInfo; (0x10) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String;
                    I)Landroid/content/pm/PackageInfo;
               => Landroidx/core/provider/FontsContractCompat;->getProvider(Landroid/content/pm/PackageManager;
                    Landroidx/core/provider/FontRequest; Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/play/core/internal/at;->a()Z (0x38) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/braintreepayments/api/internal/SignatureVerification;->isSignatureValid(Landroid/content/Context; Ljava/lang/String;
                    Ljava/lang/String; Ljava/lang/String; I)Z (0x1a) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/google/android/gms/common/GooglePlayServicesUtilLight;->zza(Landroid/content/Context; Z I)I (0x50) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;

[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.braintreepayments.api.BraintreeBrowserSwitchActivity
                  service => com.google.android.play.core.assetpacks.AssetPackExtractionService

[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> App framework identification:
           No frameworks detected (checking for Xamarin, Flutter, React Native). Furthermore, no encryption frameworks were detected
           (checking for iJiami, Bangcle)
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug> Android Debug Certificate Checking:
           App is signed with a production certificate. This is good.
[Info] <KeyStore><Hacker> KeyStore File Location:
           Did not find any possible BKS keystores or certificate keystore file (Notice: It does not mean this app does not use keystore):
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <Implicit_Intent> Implicit Service Checking:
           No dangerous implicit service.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
[Info] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           WebView addJavascriptInterface vulnerabilities not found.
------------------------------------------------------------
AndroBugs analyzing time: 1.543334 secs
HACKER_DEBUGGABLE_CHECK elapsed time: 0.2947413530000631 secs
Total elapsed time: 25.344126 secs
